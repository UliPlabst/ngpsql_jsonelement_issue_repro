// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ngpsql_jsonelement_issue_repro;

#nullable disable

namespace ngpsql_jsonelement_issue_repro.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231204155028_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ngpsql_jsonelement_issue_repro.Model", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<JsonElement?>("Json")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("ngpsql_jsonelement_issue_repro.Model2", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<JsonElement>("Json")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.ToTable("Models2");
                });
#pragma warning restore 612, 618
        }
    }
}
